4:
gaussiane diagonali 
mean1 = (0, 0)
cov1 = [[0.07,0.06], [0.06,0.07]]
mean2 = (1, 0)
cov2 = [[0.07,0.06], [0.06,0.07]]
np.random.multivariate_normal(mean, cov, 100)

127 tagli, 64 partizioni finali



100iterazioni:
100 iterazioni
una decina di partizioni finali per iterazioni
200 punti


5:
gaussiane diagonali 
mean1 = (0, 0)
cov1 = [[0.07,0.06], [0.06,0.07]]
mean2 = (0.3, -0.7)
cov2 = [[0.07,0.06], [0.06,0.07]]
np.random.multivariate_normal(mean, cov, 150)

29 tagli, 15 partizioni finali



6:
dati come nella figura 5
17 tagli, 9 part finali




classificazioni_partizioni_1:
coeff=25
part[45]
121 tagli


classificazioni_partizioni_2:
coeff=25
part[60]
109 tagli


classificazioni_partizioni_3:
coeff=22
part[90]
117 tagli


classificazioni_partizioni_4:
coeff=22
part[80]
117 tagli


classificazioni_partizioni_5:
coeff=2
47 tagli

classificazioni_partizioni_6:
coeff=0.5
29 tagli

classificazioni_partizioni_7:
metodo varianza
soglia=2.2
29 tagli

classificazioni_partizioni_8: 
la puoi eliminare allora

classificazioni_partizioni_7:
metodo varianza
soglia=8
part[90]